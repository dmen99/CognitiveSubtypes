#!/usr/bin/env python

import argparse
import subprocess as sp
import sys

from abc import ABC, abstractmethod
from shutil import which


class Config:

    dl_dir = None

    usernames = {
        "CC": None,
        "CIC": None
    }

    passwords = {
        "CC": None,
        "CIC": None,
    }


class Server(ABC, Config):

    def __init__(self, args: argparse.Namespace):

        if args.login:
            self.ssh = self.login
        elif args.download is not None:
            self.file = args.download[0]
            if len(args.download) == 2:
                self.dl_dir = args.download[1]
            self.ssh = self.download
        elif args.upload is not None:
            self.file = args.upload[0]
            self.dl_dir = args.upload[1]
            self.ssh = self.upload

        if which("sshpass") is None:
            raise Exception("Cannot find sshpass in path, make sure it is installed on system.")
        
        if self.dl_dir is None:
            raise ValueError("Download directory unspecified in 'autossh/config.py'")
        elif self.usr is None:
            raise ValueError("Username unspecified in 'autossh/config.py'")
        elif self.pwd is None:
            raise ValueError("pwd unspecified in 'autossh/config.py'")

    @property
    @abstractmethod
    def url(self):
        pass

    @property
    @abstractmethod
    def usr(self):
        pass

    @property
    @abstractmethod
    def pwd(self):
        pass

    @abstractmethod
    def login(self):
        pass

    @abstractmethod
    def download(self):
        pass

    @abstractmethod
    def upload(self):
        pass

    @staticmethod
    def check_sshpass():
        if which("sshpass") is None:
            raise Exception("Cannot find sshpass in path, make sure it is installed on system.")


class CIC(Server):

    def __init__(self, args: argparse.Namespace):
        super().__init__(args)
    
    @property
    def url(self):
        return "ps395560.dreamhostps.com"
    
    @property
    def usr(self):
        return self.usernames["CIC"]
    
    @property
    def pwd(self):
        return Config.passwords["CIC"]

    def login(self):
        sp.run(f"sshpass -p {self.pwd} ssh -p 8764 {self.usr}@{self.url}", shell=True)

    def download(self):
        sp.run(f"sshpass -p {self.pwd} rsync -avz -e 'ssh -p 8764' {self.usr}@{self.url}:{self.file} {self.dl_dir}", shell=True)

    def upload(self):
        sp.run(f"sshpass -p {self.pwd} rsync -avz -e 'ssh -p 8764' {self.file} {self.usr}@{self.url}:{self.dl_dir}", shell=True)


class CCServer(Server):
    
    def __init__(self, args: argparse.Namespace):
        super().__init__(args)
    
    @property
    def url(self):
        return "narval.computecanada.ca"
    
    @property
    def usr(self):
        return Config.usernames["CC"]
    
    @property
    def pwd(self):
        return Config.passwords["CC"]

    def login(self):
        sp.run(f"sshpass -p {self.pwd} ssh {self.usr}@{self.url}", shell=True)

    def download(self):
        sp.run(f"sshpass -p {self.pwd} rsync {self.usr}@{self.url}:{self.file} {self.dl_dir}", shell=True)

    def upload(self):
        sp.run(f"sshpass -p {self.pwd} rsync {self.file} {self.usr}@{self.url}:{self.dl_dir}", shell=True)


def main():

    parser = argparse.ArgumentParser(prog="autossh")
    subparsers = parser.add_subparsers(title='servers')

    cc = subparsers.add_parser("cc", help="Compute Canada Server")
    cc.add_argument("--login", "-l", default=None, action='store_true')
    cc.add_argument("--download", "-d", nargs="*", help="file(s) to download from server, local download directory")
    cc.add_argument("--upload", "-u", nargs="*",help="file(s) to upload to server, directory on server where file(s) will be saved"),
    cc.set_defaults(cls=CCServer)

    cic = subparsers.add_parser("cic", help="CIC Server")
    cic.add_argument("--login", "-l", default=None, action='store_true')
    cic.add_argument("--download", "-d", nargs="*", help="file(s) to download from server, local download directory")
    cic.add_argument("--upload", "-u", nargs="*", help="file(s) to upload to server, directory on server where file(s) will be saved")
    cic.set_defaults(cls=CIC)

    args = parser.parse_args(sys.argv[1:])

    n = 3 - [args.login, args.download, args.upload].count(None)
    if n != 1:
        raise ValueError(f"Expected one of 'l', 'd', 'u', but received {n} arguments")

    try:
        if len(args.download) not in range(1, 3):
            raise ValueError(f"Invalid number of arguments: {len(args.download)}")
    except TypeError:
        pass

    try:
        if len(args.upload) != 2:
            raise ValueError(f"Invalid number of arguments: {len(args.upload)}")
    except TypeError:
        pass

    server = args.cls(args)
    server.ssh()


if __name__ == main():
    main()